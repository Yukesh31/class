class Animal {
  constructor(legs, tail, gender) {
    this.legs = legs;
    this.tail = tail;
    this.gender = gender;
  }
  getLegs() {
    console.log(this.legs);
  }
}
class Dog extends Animal {
  constructor(name, sound, legs, tail, gender) {
    super(legs, tail, gender);
    this.name = name;
    this.sound = sound;
  }
  getData() {
    console.log(this.name, this.sound, this.tail, this.gender);
    this.getLegs();
  }
}
var dd = new Dog("doggy", "bark", 4, true, "male");

dd.getData();
// dd.getLegs();
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

class Myclass
{
  constructor()
  {
    this.names_=[];
  }
  //setter is used to write the values 
  
  set name(value)
  {
    this.names_.push(value);
  }
  
  //getter is used  to read the data
  get name()
  {
    return this.names_[this.names_.length-1];
  }
  
  
}

  //instance of the class Myclass
  const myclassInstance=new Myclass();
  myclassInstance.name="Bob";
  myclassInstance.name="Joe";
  
  console.log(myclassInstance.name);
    console.log(myclassInstance.names_);

/////////////////////////////////////////////////
const classInstance=new class{
  set prop(value)
  {
    console.log('setting',value);
  }
}

classInstance.prop=10;
console.log(classInstance.prop);

///////////////////////////////////////
//Getter is used to print or get the data

const classInstance=new class{
  get prop()
  {
   return 100;
  }
}

classInstance.prop=10;
console.log(classInstance.prop);

//////////////////////////////////////

funtion person()
{
  this.name='Joe';
}

funtion obj()
{
  obj.call(this)
}

//Another way to create an object
obj.prototype=Object.create(person.prototype);
const app=new obj();
console.log(app.name);

// Joe

var ref=new Classname();
/////////////////////////////////////

var obj = {
  firstName: "John",
  lastName: "Doe",

  address: {
    street: "Main Street",
    city: "New York",
    state: "NY",
    zip: "10001",
  },
  getName: function () {
    return this.firstName + " " + this.lastName;
  },

  getAddress: function () {
    return this.zip;
  },
};

console.log(obj.getName());
console.log(obj.getAddress());

///////////////////////////////////////////////
var person1 = {
  name: "John",
  age: 25,
  battery: 50,
  mobileCharge: function (x, y) {
    return (this.battery = x + y);
  },
};

var person2 = {
  battery: 60,
};

console.log(person1.mobileCharge(70, 5));
person1.mobileCharge.call(person2, "hi", "there");
person1.mobileCharge.apply(person2, ["hi", "there"]);
var tt = person1.mobileCharge.bind(person2, 10, 77);
tt();
console.log(person2);
/////////////////////////////////////////
var fname="yukesh";
var lname="kumaran";
console.log(`${fname} ${lname}`);
//////////////////////
var arr1=[1,2,3,4,5];
var arr2=[1,2,3,4,5];
let x=["helllo"];
console.log(...arr1,...arr2,...x);

function foo(x,...y){
  console.log(x,y);
}
foo(1,2,[3,4],5,6,"hello");
////////////////////////////
fetch("https://restcountries.eu/rest/v2/all")
.then((resp)=>
{
  return resp.json();
})
.then((result)=>{
  var t=result;
  for(i=0;i<t.length;i++)
  console.log(t[i].name,t[i].flag);

})
.catch((err)=>{
  console.log(err)

});
///////////////////////////

et obj = [
let obj = [
  {
    postId: 1,
    id: 1,
    name: "id labore ex et quam laborum",
    email: "Dallas@ole.me",
    body: "laudantium enim quasi",
  },
  {
    postId: 1,
    id: 2,
    name: "quo vero reiciendis velit similique earum",
    email: "Jayne_Kuhic@sydney.com",
    body: "est natus enim nihil est dolore omnis voluptatem numquam",
  },
From Venkat to Everyone:  10:46 AM
{
    postId: 2,
    id: 6,
    name: "et fugit eligendi deleniti quidem qui sint nihil autem",
    email: "Presley.Mueller@myrl.com",
    body: "doloribus at sed quis culpa deserunt consectetur qui",
  },
  {
    postId: 2,
    id: 7,
    name: "repellat consequatur praesentium ",
    email: "Dallas@ole.me",
    body: "maiores sed dolores similique labore et",
  },
  {
    postId: 2,
    id: 8,
    name: "et omnis dolorem",
    email: "Jayne_Kuhic@sydney.com",
    body: "ut voluptatem corrupti velit\nad voluptatem ",
  },
  {
    postId: 2,
    id: 9,
    name: "provident id voluptas",
    email: "Dallas@ole.me",
    body: "sapiente assumenda molestiae",
  },
  {
    postId: 2,
    id: 10,
    name: "eaque et deleniti atque tenetur ut quo ut",
    email: "Jayne_Kuhic@sydney.com",
    body: "voluptate iusto quis nobis",
  },
];

//////////////////////////////////////////
  
let array = [{
  name: 'Butters',
  age: 3,
  type: 'dog'
},
{
  name: 'Lizzy',
  age: 6,
  type: 'dog'
},
{
  name: 'Red',
  age: 1,
  type: 'cat'
},
{
  name: 'Joey',
  age: 3,
  type: 'dog'
},
];

let result = (function (array) {
  return (array.filter((odd) => {
  if(odd.type=="dog")
  return odd;
  }))
  })(array);
  console.log( result);

  let result1= (function (result) {
    return (result.map((item)=>
    {
     return (item.age*5);
   }))
  })
  (result);
  console.log( result1);

  let result2=(function (result1) {
    return (result1.reduce((total,item)=>
    {
  return  total+item;
   
  }))
  })
  (result1);
  
  console.log( result2);
  
  
  /////////////////////////////////////
  
  
  
  
























