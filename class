class Animal {
  constructor(legs, tail, gender) {
    this.legs = legs;
    this.tail = tail;
    this.gender = gender;
  }
  getLegs() {
    console.log(this.legs);
  }
}
class Dog extends Animal {
  constructor(name, sound, legs, tail, gender) {
    super(legs, tail, gender);
    this.name = name;
    this.sound = sound;
  }
  getData() {
    console.log(this.name, this.sound, this.tail, this.gender);
    this.getLegs();
  }
}
var dd = new Dog("doggy", "bark", 4, true, "male");

dd.getData();
// dd.getLegs();
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

class Myclass
{
  constructor()
  {
    this.names_=[];
  }
  //setter is used to write the values 
  
  set name(value)
  {
    this.names_.push(value);
  }
  
  //getter is used  to read the data
  get name()
  {
    return this.names_[this.names_.length-1];
  }
  
  
}

  //instance of the class Myclass
  const myclassInstance=new Myclass();
  myclassInstance.name="Bob";
  myclassInstance.name="Joe";
  
  console.log(myclassInstance.name);
    console.log(myclassInstance.names_);

/////////////////////////////////////////////////
const classInstance=new class{
  set prop(value)
  {
    console.log('setting',value);
  }
}

classInstance.prop=10;
console.log(classInstance.prop);

///////////////////////////////////////
//Getter is used to print or get the data

const classInstance=new class{
  get prop()
  {
   return 100;
  }
}

classInstance.prop=10;
console.log(classInstance.prop);

//////////////////////////////////////

funtion person()
{
  this.name='Joe';
}

funtion obj()
{
  obj.call(this)
}

//Another way to create an object
obj.prototype=Object.create(person.prototype);
const app=new obj();
console.log(app.name);

// Joe

var ref=new Classname();
/////////////////////////////////////

var obj = {
  firstName: "John",
  lastName: "Doe",

  address: {
    street: "Main Street",
    city: "New York",
    state: "NY",
    zip: "10001",
  },
  getName: function () {
    return this.firstName + " " + this.lastName;
  },

  getAddress: function () {
    return this.zip;
  },
};

console.log(obj.getName());
console.log(obj.getAddress());

///////////////////////////////////////////////
var person1 = {
  name: "John",
  age: 25,
  battery: 50,
  mobileCharge: function (x, y) {
    return (this.battery = x + y);
  },
};

var person2 = {
  battery: 60,
};

console.log(person1.mobileCharge(70, 5));
person1.mobileCharge.call(person2, "hi", "there");
person1.mobileCharge.apply(person2, ["hi", "there"]);
var tt = person1.mobileCharge.bind(person2, 10, 77);
tt();
console.log(person2);
/////////////////////////////////////////

class movie {
    constructor(title, studio, rating) {
      this.title = title;
      this.studio = studio;
      this.rating = rating;
    }
    setrating() {
      console.log(this.rating);
    }
  
  
    getmovie() {
      console.log(this.title, this.studio, this.rating);
      
    }
}
  var dd = new movie("casino", "EON productions", "PG13");
  dd.getmovie();
  
  ///////////////////////////////////////////////////////////
  class circle {
    constructor(radius, colour,area,circum) {
      this.radius = radius;
      this.colour = colour;
      this.area=area;
      this.circum=circum;
    }
    setradius() {
        this.radius=radius;
        }
  
  
    getradius() {
        this.radius=radius;
      
    }
    setcolor(){
        this.colour=colour;
    }
    getcolour(){
        console.log(this.colour);
    }
    getarea(){
        console.log(Math.PI*this.radius*this.radius);

    }
    getcircum()
    {
        console.log(2*Math.PI*this.radius);
    }
}
  var dd = new circle(10,"red");
  dd.getcolour();
  dd.getarea();
  dd.getcircum();
  //////////////////////////////////////////////////////////
  
  class person {
    constructor(name, age, number ,qualification) {
      this.name = name;
      this.age = age;
      this.number = number;
      this.qualification=qualification;
    }
    
  }
  class status extends person {
    constructor(name, age, number ,qualification, fathers_name ,mothers_name,marital_status,sex) {
      super(name, age, number ,qualification);
      this.marital_status= marital_status;
      this.sex = sex;
      this.fathers_name=fathers_name;
      this.mothers_name=mothers_name;
    }
    getData() {
      console.log(this.name, this.age, this.number, this.qualification,this.fathers_name,this.mothers_name,this.marital_status,this.sex);
      
    }
  }
  var dd = new status("yukesh", "21","9962192464", "BE","vasudeavan","usha", "single","male");
  
  dd.getData();
///////////////////////////////////////////////////


  
  
  
  
























